# -*- coding: utf-8 -*-
"""AIPoemGenerator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_IdDuMYwkefi6WJ02v4ue9S3FrSNmASh
"""

import random
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Activation
from tensorflow.keras.optimizers import RMSprop

# Load Shakespeare dataset
filepath = tf.keras.utils.get_file('shakespeare.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')
text = open(filepath, 'rb').read().decode(encoding='utf-8').lower()

# Character mapping
characters = sorted(set(text))
char_to_index = {c: i for i, c in enumerate(characters)}
index_to_char = {i: c for i, c in enumerate(characters)}

# Sequence settings
SEQ_LENGTH = 40
STEP_SIZE = 3

sentences = []
next_character = []

for i in range(0, len(text) - SEQ_LENGTH, STEP_SIZE):
    sentences.append(text[i: i + SEQ_LENGTH])
    next_character.append(text[i + SEQ_LENGTH])

# Fix: Change dtype to np.float32
x = np.zeros((len(sentences), SEQ_LENGTH, len(characters)), dtype=np.float32)
y = np.zeros((len(sentences), len(characters)), dtype=np.float32)

# One-hot encoding
for i, sentence in enumerate(sentences):
    for t, character in enumerate(sentence):
        x[i, t, char_to_index[character]] = 1.0
    y[i, char_to_index[next_character[i]]] = 1.0

# # Model Definition
# model = Sequential([
#     LSTM(128, input_shape=(SEQ_LENGTH, len(characters))),
#     Dense(len(characters)),
#     Activation('softmax')
# ])

# # Fix: Use `learning_rate` instead of `lr`
# model.compile(loss='categorical_crossentropy', optimizer=RMSprop(learning_rate=0.01))

# # Train Model
# model.fit(x, y, batch_size=256, epochs=4)

# # Save Model
# model.save('textgenerator.keras')

model = tf.keras.models.load_model('textgenerator.keras')

def sample(preds, temperature=1.0):
    preds = np.asarray(preds).astype('float64')
    preds = np.log(preds) / temperature
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)
    probas = np.random.multinomial(1, preds, 1)
    return np.argmax(probas)

def generate_text(length, temperature):
    start_index = random.randint(0, len(text) - SEQ_LENGTH - 1)
    generated = ''
    sentence = text[start_index: start_index + SEQ_LENGTH]
    generated += sentence
    for i in range(length):
        x_predictions = np.zeros((1, SEQ_LENGTH, len(characters)))
        for t, character in enumerate(sentence):
            x_predictions[0, t, char_to_index[character]] = 1.0

        predictions = model.predict(x_predictions, verbose=0)[0]
        next_index = sample(predictions, temperature)
        next_character = index_to_char[next_index]

        generated += next_character
        sentence = sentence[1:] + next_character
    return generated


print('-- Temperature = 0.2 --')
print(generate_text(500, 0.2))
print('-- Temperature = 0.4 --')
print(generate_text(500, 0.4))
print('-- Temperature = 0.6 --')
print(generate_text(500, 0.6))
print('-- Temperature = 0.8 --')
print(generate_text(500, 0.8))
print('-- Temperature = 1.0 --')
print(generate_text(500, 1.0))

"""# New Section"""